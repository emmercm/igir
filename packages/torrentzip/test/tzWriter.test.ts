import path from 'node:path';

import Logger from '../../../src/console/logger.js';
import { LogLevel } from '../../../src/console/logLevel.js';
import Temp from '../../../src/globals/temp.js';
import Igir from '../../../src/igir.js';
import FsPoly from '../../../src/polyfill/fsPoly.js';
import FileChecksums, { ChecksumBitmask } from '../../../src/types/files/fileChecksums.js';
import Options from '../../../src/types/options.js';

it('should write correct zip files', async () => {
  const tempDir = await FsPoly.mkdtemp(Temp.getTempDir());

  try {
    await new Igir(
      new Options({
        commands: ['copy', 'zip'],
        dat: [path.join('test', 'fixtures', 'dats', 'one.*')],
        input: [path.join('test', 'fixtures', 'roms')],
        output: tempDir,
        filterRegexExclude: 'Lorem Ipsum',
        excludeDisks: true,
        dirDatName: true,
        disableCache: true,
      }),
      new Logger(LogLevel.NEVER),
    ).main();

    const writtenFiles = (await FsPoly.walk(tempDir)).sort();
    const writtenFilesHashed = await Promise.all(
      writtenFiles.map(async (filePath) => {
        const checksums = await FileChecksums.hashFile(filePath, ChecksumBitmask.CRC32);
        return [filePath.replace(tempDir + path.sep, ''), checksums.crc32 as string];
      }),
    );

    expect(writtenFilesHashed).toEqual([
      // Generated by ROMVault v3.7.2 (zlib v1.1.3)
      [path.join('One', 'Fizzbuzz.zip'), '9dfd1d34'],
      [path.join('One', 'Foobar.zip'), '96d4b5fe'],
      [path.join('One', 'GameCube-240pSuite-1.19.zip'), '96e24c01'],
      [path.join('One', 'One Three.zip'), 'ab9a27f2'],
      [path.join('One', 'Optical Game (Disc 1).zip'), '7c60248b'],
      [path.join('One', 'Optical Game (Disc 2).zip'), '0a0641d3'],
      [path.join('One', 'Three Four Five.zip'), '1f83f597'],
      [path.join('One', 'UMD.zip'), '445d49b1'],
    ]);
  } finally {
    await FsPoly.rm(tempDir, {
      recursive: true,
      force: true,
    });
  }
});
