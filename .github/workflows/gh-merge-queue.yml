# Requires repo secret: PERSONAL_ACCESS_TOKEN with permissions:
#   Pull Requests: read and write
#   Workflow: read and write

# This effectively creates a merge queue out of all PRs marked as auto-merge, but merge queues are
#   a GitHub feature is only available to organizations or those on Enterprise Cloud right now.
#   https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue

name: GitHub Merge Queue

on:
  # A PR merge has occurred, move on to the next PR
  push:
    branches:
      - 'main'
      - '*feature*'
      - '**/*feature*'
  # A PR is no longer eligible for the queue, and it might have been at the head
  pull_request:
    types:
      - closed
      - converted_to_draft
  # Jiggle the handle every hour just in case
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  # Update the oldest auto-merge PR that's out-of-date with the base branch
  update-pr-branch:
    runs-on: ubuntu-latest
    steps:
      # Required for `gh` CLI
      - uses: actions/checkout@v4
      - run: |
          pr_search="sort:created-asc"

          echo "PRs found:"
          gh pr list --search "${pr_search}" --json number --jq '.[] | [.name, .number] | @tsv' | cat

          eligible_prs="$(gh pr list --search "${pr_search}" --json number,isDraft,mergeable,mergeStateStatus,autoMergeRequest --jq '.[] | select(.isDraft==false and .mergeable=="MERGEABLE" and .mergeStateStatus=="BEHIND" and .autoMergeRequest!=null) | .number')"
          if [[ "${eligible_prs}" == "" ]]; then
            echo "No eligible PRs found"
            exit 0
          fi
          echo "$(echo "${eligible_prs}" | wc -l | awk '{print $1}') eligible PRs found: $(echo "${eligible_prs}" | awk '{print $1}' | awk 'ORS=", "' | sed 's/, *$//')"

          while read -r number; do
            echo "Updating PR #${number}"
            gh pr update-branch "${number}" && break
          done <<< "${eligible_prs}"
        env:
          # GitHub won't run workflows off of code commits+pushes from the `github-actions` user
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # Add a label to the oldest Renovate auto-merge PR that has conflicts, such that Renovate rebases it
  renovate-labeler:
    permissions:
      # actions/checkout
      contents: read
      # `gh` CLI actions
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    steps:
      # Required for `gh` CLI
      - uses: actions/checkout@v4
      - run: |
          author="app/renovate"
          label="renovate/rebase"
          pr_search="author:${author} sort:created-asc -label:${label}"

          echo "Renovate PRs found:"
          gh pr list --search "${pr_search}" --json number --jq '.[] | [.name, .number] | @tsv' | cat

          eligible_prs="$(gh pr list --search "${pr_search}" --json number,isDraft,mergeable,autoMergeRequest --jq '.[] | select(.isDraft==false and .mergeable=="CONFLICTING" and .autoMergeRequest!=null) | .number')"
          if [[ "${eligible_prs}" == "" ]]; then
            echo "No eligible PRs found"
            exit 0
          fi
          echo "$(echo "${eligible_prs}" | wc -l | awk '{print $1}') eligible PRs found: $(echo "${eligible_prs}" | awk '{print $1}' | awk 'ORS=", "' | sed 's/, *$//')"

          while read -r number; do
            echo "Adding label '${label}' to PR #${number}"
            gh pr edit "${number}" --add-label "${label}" && break
          done <<< "${eligible_prs}"
        env:
          GH_TOKEN: ${{ github.token }}

