{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "airbnb-base",
    "airbnb-typescript/base"
  ],
  "plugins": [
    "@typescript-eslint",
    "simple-import-sort",
    "jest"
  ],

  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "sourceType": "module"
  },
  "ignorePatterns": ["build/**"],

  "env": {
    "jest/globals": true
  },

  "rules": {
    // ***** Imports *****
    "@typescript-eslint/no-restricted-imports": ["error", {
      "patterns": [{
        "group": ["node:*"],
        "message": "Don't use prefixes with Node.js built-ins."
      }],
      "paths": [{
        "name": "fs",
        "importNames": ["promises"],
        "message": "Use util.promisify(fs.*)() instead of fs.promises.*()."
      }]
    }],
    "simple-import-sort/exports": "error",
    "simple-import-sort/imports": "error",

    // Require explicit return types on functions and class methods.
    "@typescript-eslint/explicit-function-return-type": "error",

    // ***** Promises *****
    // Disallow awaiting a value that is not a Thenable.
    "@typescript-eslint/await-thenable": "error",
    // Disallow async functions which have no `await` expression.
    "@typescript-eslint/require-await": "error",
    // Enforce consistent returning of awaited values.
    "@typescript-eslint/return-await": "error",
    // Require any function or method that returns a Promise to be marked async.
    "@typescript-eslint/promise-function-async": ["error"],

    // ***** Misc Disallows *****
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-readonly": "error",

    // ***** Misc Allows *****
    // There are a few places where this needs to be allowed, but only a few, so warn on them
    "@typescript-eslint/no-floating-promises": "warn",
    // There are a few places where this needs to be allowed, but only a few, so warn on them
    "@typescript-eslint/no-unused-expressions": "warn",
    // Significant parts of igir use async.js or mutexes & semaphores to intentlaly limit
    // concurrent promises, so we want to respect those
    "no-await-in-loop": "off",
    // ROM patch file processors use a lot of bitwise operations for legitimate reasons
    "no-bitwise": "off",
    // Referencing ASCII characters <32 is entirely legitimate
    "no-control-regex": "off"
  }
}
