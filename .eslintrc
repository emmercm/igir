{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "airbnb-base",
    "airbnb-typescript/base",
    "plugin:jsdoc/recommended-typescript-error"
  ],
  "plugins": [
    "@typescript-eslint",
    "simple-import-sort",
    "jest",
    "unicorn"
  ],

  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "sourceType": "module"
  },
  "ignorePatterns": ["build/**"],

  "env": {
    "jest/globals": true
  },

  "rules": {
    // ***** Files *****
    "unicorn/no-empty-file": "error",
    "unicorn/filename-case": ["error", {
      "case": "camelCase"
    }],

    // ***** Imports *****
    "unicorn/prefer-node-protocol": "error",
    "@typescript-eslint/no-restricted-imports": ["error", {
      "paths": [{
        "name": "fs",
        "importNames": ["promises"],
        "message": "Use util.promisify(fs.*)() instead of fs.promises.*()."
      }]
    }],
    "simple-import-sort/exports": "error",
    "simple-import-sort/imports": "error",

    // ***** Typing *****
    // Require explicit return types on functions and class methods.
    "@typescript-eslint/explicit-function-return-type": "error",

    // ***** Promises *****
    // Disallow awaiting a value that is not a Thenable.
    "@typescript-eslint/await-thenable": "error",
    // Disallow async functions which have no `await` expression.
    "@typescript-eslint/require-await": "error",
    // Enforce consistent returning of awaited values.
    "@typescript-eslint/return-await": "error",
    // Require any function or method that returns a Promise to be marked async.
    "@typescript-eslint/promise-function-async": ["error"],

    // ***** JSDoc *****
    "jsdoc/require-jsdoc": ["error", {
      // Require on public parts of classes
      "checkConstructors": false,
      "contexts": [
        "ClassDeclaration",
        // TODO(cemmer): require private methods as well
        "MethodDefinition[accessibility!=private][key.name!=/^(get|set)[A-Z][a-zA-Z]+/]"
      ]
    }],
    "jsdoc/require-param": "off",
    "jsdoc/require-returns": "off",
    "jsdoc/no-blank-blocks": "error",

    // ***** Classes *****
    "unicorn/no-static-only-class": "error",
    "@typescript-eslint/prefer-readonly": "error",

    // ***** Functions *****
    "unicorn/prefer-default-parameters": "error",

    // ***** Operands *****
    "@typescript-eslint/prefer-nullish-coalescing": "error",

    // ***** Arrays *****
    "unicorn/prefer-array-find": "error",
    "unicorn/prefer-at": "error",

    // ***** Numbers *****
    "unicorn/no-zero-fractions": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/numeric-separators-style": "error",

    // ***** Misc Allows *****
    // There are a few places where this needs to be allowed, but only a few, so warn on them
    "@typescript-eslint/no-floating-promises": "warn",
    // There are a few places where this needs to be allowed, but only a few, so warn on them
    "@typescript-eslint/no-unused-expressions": "warn",
    // Significant parts of igir use async.js or mutexes & semaphores to intentlaly limit
    // concurrent promises, so we want to respect those
    "no-await-in-loop": "off",
    // ROM patch file processors use a lot of bitwise operations for legitimate reasons
    "no-bitwise": "off",
    // Referencing ASCII characters <32 is entirely legitimate
    "no-control-regex": "off"
  },

  "overrides": [
    {
      "files": [
        "test/**/*.ts",
        // TODO(cemmer)
        "src/polyfill/**/*.ts",
        "src/types/files/**/*.ts",
        "src/types/patches/**/*.ts"
      ],
      "rules": {
        "jsdoc/require-jsdoc": "off"
      }
    }
  ]
}
